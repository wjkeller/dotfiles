#!/bin/sh
# git-fork <orig-name> <orig-url> <fork-name> <fork-url>
# takes the initial project name and url and forks into the fork name and url
# need to do setup of the fork's repo first

if [ $# -ne 4 ]; then
         echo 1>&2 Usage: $0 orig-name orig-url fork-name fork-url
         exit 127
fi

ORIGINAL=$1
ORIGINAL_URL=$2
ORIGINAL_BRANCH="${ORIGINAL}_master"

FORK=$3
FORK_URL=$4

# Create new local clone for the new project
git clone -o ${ORIGINAL} ${ORIGINAL_URL} ${FORK}
cd ${FORK}

# Set up a standard track between initial master and local initial project master
git config branch.${ORIGINAL_BRANCH}.remote ${ORIGINAL}
git config branch.${ORIGINAL_BRANCH}.merge refs/heads/master

# Automatically push the right branch
git config remote.${ORIGINAL}.push refs/heads/${ORIGINAL_BRANCH}:master
# Don't bring in the other shared branches from initial project
git config remote.${ORIGINAL}.fetch +refs/heads/master:refs/remotes/${ORIGINAL}/master

# Push new local repo it to new shared repo
git remote add origin ${FORK_URL}
git push origin master

# Configure standard track of master with new local repo
git config branch.master.remote origin
git config branch.master.merge refs/heads/master

